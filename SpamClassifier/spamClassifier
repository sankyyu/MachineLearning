#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Jul 15 11:12:46 2017

@author: Sanky
"""

import os
import io
import numpy as np
from pandas import DataFrame
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB

def readFiles(path):
    for root,dirnames,filenames in os.walk(path):
        for filename in filenames:
            path=os.path.join(root,filename)
            inBody=False
            lines=[]
            f=io.open(path,'r',encoding='latin1')
            for line in f:
                if inBody:
                    lines.append(line)
                elif line=='\n':
                    inBody=True
            f.close()
            message='\n'.join(lines)
            yield path,message
            
def dataFrameFromDirectory(path,classification):
    rows = []
    index = []
    for filename,message in readFiles(path):
        rows.append({'message':message,'class':classification})
        index.append(filename)
    return DataFrame(rows,index)

data=DataFrame({'message':[],'class':[]})

data = data.append(dataFrameFromDirectory('./emails/ham','ham'))
data = data.append(dataFrameFromDirectory('./emails/spam','spam'))  

from sklearn.cross_validation import train_test_split
train,test= train_test_split(data,test_size=0.2,random_state=5) 
vectorizer =CountVectorizer()
counts=vectorizer.fit_transform(train['message'].values)

classifier=MultinomialNB()
targets=train['class'].values
classifier.fit(counts,targets)

testMessage=test['message']
testcounts=vectorizer.transform(testMessage)
predictions=classifier.predict(testcounts)

from sklearn.metrics import confusion_matrix
cm=confusion_matrix(test['class'],predictions)

accuracy_rate=(cm[0][0]+cm[1][1])/len(test)